\ test-situation.fs

REQUIRE ffl/tst.fs
REQUIRE situation.fs
REQUIRE display.fs

: BINARY
    2 BASE ! ;

." situation" CR

."    empty situation" CR
T{   
    EMPTY-SITUATION 0 0 0 ?S ?S ?S
}T
."    creating a key value from a piece" CR
T{
    CROSS PNO 0 2 3 PIECE-KEY BINARY 1000011010 ?S DECIMAL
    UPPERI PNO 1 7 7 PIECE-KEY BINARY 10011111110000000000 ?S DECIMAL
}T
."    creating a board value from a piece" CR
T{
    CROSS PNO 0 0 0 PIECE-BOARD BINARY 000000100000011100000010 ?S DECIMAL
    UPPERI PNO 0 0 0 PIECE-BOARD BINARY 11111 ?S DECIMAL
    UPPERI PNO 1 0 0 PIECE-BOARD BINARY 100000001000000010000000100000001 ?S DECIMAL
    LOWERS PNO 0 0 0 PIECE-BOARD BINARY 110000001000000110 ?S DECIMAL
}T
."    creating a one piece situation for a piece number within 0-5" CR
T{
    UPPERI PNO 0 0 0 PIECE-SITUATION
    BINARY 11111 ?S DECIMAL
    BINARY 10000000000000000000 ?S DECIMAL
    0 ?S
    UPPERI PNO 1 3 7 PIECE-SITUATION
    DROP UPPERI PNO -ROT KEY-PIECE ?TRUE SWAP 3 ?S 7 ?S 1 ?S

    UPPERI PNO 1 3 7 PIECE-SITUATION
    DROP SNAKE PNO -ROT KEY-PIECE ?FALSE DROP DROP DROP

    SNAKE PNO 3 2 4 PIECE-SITUATION
    DROP SNAKE PNO -ROT KEY-PIECE ?TRUE SWAP 2 ?S 4 ?S 3 ?S
}T
."    creating a one piece situation for a piece number within 6-11" CR
T{
    LOWERS PNO 0 0 0 PIECE-SITUATION
    BINARY 110000001000000110 ?S DECIMAL
    0 ?S
    BINARY 1000000000 ?S DECIMAL
}T
."    merging two piece situations together (assuming they are fitting together)" CR
T{
    UPPERI PNO 0 0 0 PIECE-SITUATION
    CROSS  PNO 0 0 1 PIECE-SITUATION
    MERGE-SITUATIONS
    BINARY 10000001110000001000011111 ?S DECIMAL
    BINARY 10000000001000001000 ?S DECIMAL
    0 ?S
}T
."    checking that a piece is fitting at a position" CR
T{
    UPPERI PNO 0 7 0 FITTING? ?FALSE
    UPPERI PNO 0 3 0 FITTING? ?TRUE
    UPPERI PNO 1 0 7 FITTING? ?FALSE
    UPPERI PNO 1 0 3 FITTING? ?TRUE
}T
."    checking that two situations can be merged: case of conflicting squares" CR
T{
    UPPERI PNO 0 0 0 PIECE-SITUATION
    CROSS  PNO 0 0 0 PIECE-SITUATION
    MERGING? ?FALSE
    UPPERI PNO 0 0 0 PIECE-SITUATION
    CROSS  PNO 0 0 1 PIECE-SITUATION
    MERGING? ?TRUE
}T
."    checking that two situations can be merged: case of piece already present" CR
T{
    UPPERI PNO 0 0 0 PIECE-SITUATION
    UPPERI PNO 0 0 1 PIECE-SITUATION
    MERGING? ?FALSE
    UPPERI PNO 0 0 0 PIECE-SITUATION
    CROSS  PNO 0 0 1 PIECE-SITUATION
    MERGING? ?TRUE
    SNAKE  PNO 0 0 0 PIECE-SITUATION
    SNAKE  PNO 0 0 3 PIECE-SITUATION
    MERGING? ?FALSE
    UPPERI PNO 0 0 0 PIECE-SITUATION
    SNAKE  PNO 0 0 3 PIECE-SITUATION
    MERGING? ?TRUE
}T
."    collect all possible situation for a given piece" CR

: .DEMO
    SITUATIONS OVER + SWAP DO
        I SITUATION@
        .SITUATION KEY 32 <> IF LEAVE THEN
    SITUATION% +LOOP 0 11 AT-XY .NORMAL ;
T{

    CROSS  PNO PIECE-SITUATIONS CROSS-SET 
    UPPERI PNO PIECE-SITUATIONS UPPERI-SET 
    BRIDGE PNO PIECE-SITUATIONS BRIDGE-SET 
    CORNER PNO PIECE-SITUATIONS CORNER-SET 
    STAIRS PNO PIECE-SITUATIONS STAIRS-SET 
    UPPERT PNO PIECE-SITUATIONS UPPERT-SET 
    LOWERS PNO PIECE-SITUATIONS LOWERS-SET 
    LOWERT PNO PIECE-SITUATIONS LOWERT-SET 
    UPPERL PNO PIECE-SITUATIONS UPPERL-SET 
    BIRD   PNO PIECE-SITUATIONS BIRD-SET 
    SNAKE  PNO PIECE-SITUATIONS SNAKE-SET 
    HOUSE  PNO PIECE-SITUATIONS HOUSE-SET 
    ." CROSS-SET:" CROSS-SET @ . CR
    ." UPPERI-SET:" UPPERI-SET @ . CR
    ." BRIDGE-SET:" BRIDGE-SET @ . CR
    ." CORNER-SET:" CORNER-SET @ . CR
    ." STAIRS-SET:" STAIRS-SET @ . CR
    ." UPPERT-SET:" UPPERT-SET @ . CR
    ." LOWERS-SET:" LOWERS-SET @ . CR
    ." LOWERT-SET:" LOWERT-SET @ . CR
    ." UPPERL-SET:" UPPERL-SET @ . CR
    ." BIRD-SET:" BIRD-SET @ . CR
    ." SNAKE-SET:" SNAKE-SET @ . CR
    ." HOUSE-SET:" HOUSE-SET @ . CR
    CR
}T

."    collect all possible situations for two pieces" CR
T{
    LARGE-SET SET-1
    LARGE-SET SET-2
    LARGE-SET SET-3
    LARGE-SET SET-4
    LARGE-SET SET-5
    CROSS-SET UPPERI-SET SET-1 MERGE-SETS
    ." CROSS-SET X UPPERI-SET:" SET-1 @ .  CR
    BRIDGE-SET CORNER-SET SET-2 MERGE-SETS
    ." BRIDGE-SET X CORNER-SET:" SET-2 @ .  CR
    SET-1 SET-2 SET-3 MERGE-SETS
    ." SET-3 = CROSS-SET X UPPERI-SET x BRIDGE-SET x CORNER-SET:" SET-3 @ .  CR
    STAIRS-SET UPPERT-SET SET-1 MERGE-SETS
    ." STAIRS-SET X UPPERT-SET:" SET-1 @ .  CR
    LOWERS-SET LOWERT-SET SET-2 MERGE-SETS
    ." LOWERS-SET X LOWERT-SET:" SET-2 @ .  CR
    SET-1 SET-2 SET-4 MERGE-SETS
    ." SET-4 = STAIRS-SET X UPPERT-SET X LOWERS-SET X LOWERT-SET:" SET-4 @ .  CR
    UPPERL-SET BIRD-SET SET-1 MERGE-SETS
    ." UPPERL-SET X BIRD-SET:" SET-1 @ .  CR
    SNAKE-SET HOUSE-SET SET-2 MERGE-SETS
    ." SNAKE-SET X HOUSE-SET:" SET-2 @ .  CR
    SET-1 SET-2 SET-5 MERGE-SETS
    ." SET-5 = UPPERL-SET X BIRD-SET X SNAKE-SET x HOUSE-SET:" SET-5 @ .  CR
    SET-3 SET-4 SET-1 MERGE-SETS
    ." SET-1 = CROSS-SET X UPPERI-SET x BRIDGE-SET x CORNER-SET X STAIRS-SET X UPPERT-SET X LOWERS-SET X LOWERT-SET:" SET-1 @ .  CR
    SET-1 SET-5 SET-2 MERGE-SETS
    :xa
    ." SET-3 = CROSS-SET X UPPERI-SET x BRIDGE-SET x CORNER-SET X STAIRS-SET X UPPERT-SET X LOWERS-SET X LOWERT-SET X UPPERL-SET X BIRD-SET X SNAKE-SET x HOUSE-SET:" SET-2 @ .  CR

}T

SET-1 FREE
CROSS-SET FREE
UPPERI-SET FREE
BRIDGE-SET FREE
CORNER-SET FREE
STAIRS-SET FREE
UPPERT-SET FREE
LOWERS-SET FREE
LOWERT-SET FREE
UPPERL-SET FREE
BIRD-SET FREE
SNAKE-SET FREE
HOUSE-SET FREE

.NORMAL
BYE

